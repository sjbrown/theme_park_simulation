"""
events.py
---------
This is a weird module and uses difficult to read code to make an event
broker with the minimum of typing.  Basically whenever an event is created, 
it is automatically broadcast using the module-level function, EventFired()

Note: this is much less sophisticated than an EventManager (as in sjbeasts
and my tutorial).  In particular, it suffers from the ABC->ACB event "out of
order" phenomenon and doesn't use weakrefs, so it keeps all listeners 
unessecarily alive.

It's only advantage is that it saves me some typing.

For the Glarf project these events are only used for special effects and stuff
ie, non-mission-critical things.
"""
#------------------------------------------------------------------------------
# Module-Level stuff
#------------------------------------------------------------------------------
from log import log

#outside objects can feel free to add themselves to this list
#YES, it is pretty lazy.  Bad programmer!  No cookie!
__listeners = []

__validEvents = []

def AddListener( newListner ):
	__listeners.append( newListner )

def AddEvent( newEvent ):
	__validEvents.append( newEvent )
	
def Fire( evName, *args, **kwargs ):
	#NOTE: by just taking the evName as a string, this won't be checked
	#      at load-time, it will be checked at runtime.  Load-time would
	#      be preferred, but I'm lazy and these events are unimportant
	#      (only for special effects and the like)

	# run-time check. looks in the module-level globals for the named event
	if evName not in __validEvents:
		raise Exception( "event not defined" )

	#log.info( 'firing event' + str( evName ) )
	for listener in __listeners:
		methodName = "On_"+ evName
		#if the listener has a method that can handle this, call it
		try: 
			#get the method
			listnerMethod = getattr( listener, methodName )
		except:
			continue
		try:
			#call that method
			listnerMethod( *args, **kwargs )
		except Exception, e:
			log.info( str(listener) + ' failed to handle method '+\
			          methodName + ' with args '+\
			          str(args) + ' ' + str(kwargs) + ' properly' )
			log.info( str( e ) )


#------------------------------------------------------------------------------
class Event:
	"""this is a superclass for any events that might be generated by an
	object """
	def __init__(self):
		self.name = "Generic Event"
	def broadcast(self):
		pass
